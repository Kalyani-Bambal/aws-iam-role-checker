name: Terraform Precheck Workflow

on:
  workflow_dispatch:
  push:
    branches: [ test-1 ]
  pull_request:
    branches: [ test-1 ]

jobs:
  check-iam-roles:
    runs-on: ubuntu-latest
    steps:
      - name: Sample IAM role check placeholder
        run: echo "✅ IAM roles check passed (replace with your IAM validation logic)"

  terraform-precheck:
    needs: check-iam-roles
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install helpers (yq, jq)
        run: |
          sudo apt-get update -y
          sudo wget -qO /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/bin/yq
          sudo apt-get install -y jq

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Read config values
        id: read-config
        run: |
          AWS_ACCOUNTS=$(yq '.inputs.aws_accounts' config/config.yml | tr -d '"')
          AWS_REGIONS=$(yq '.inputs.aws_regions' config/config.yml | tr -d '"')
          ROLE_NAMES=$(yq '.inputs.role_names' config/config.yml | tr -d '"')
          OIDC_ROLE=$(yq '.inputs.oidc_assume_role' config/config.yml | tr -d '"')

          echo "aws_accounts=$AWS_ACCOUNTS" >> $GITHUB_ENV
          echo "aws_regions=$AWS_REGIONS" >> $GITHUB_ENV
          echo "role_names=$ROLE_NAMES" >> $GITHUB_ENV
          echo "oidc_role=$OIDC_ROLE" >> $GITHUB_ENV

      - name: Terraform prechecks (loop accounts & regions)
        env:
          AWS_ACCOUNTS: ${{ env.aws_accounts }}
          AWS_REGIONS: ${{ env.aws_regions }}
          ROLE_NAMES: ${{ env.role_names }}
          OIDC_ROLE: ${{ env.oidc_role }}
        run: |
          set -euo pipefail
          IFS=',' read -ra ACC_ARR <<< "$AWS_ACCOUNTS"
          IFS=',' read -ra REG_ARR <<< "$AWS_REGIONS"

          ROLE_NAMES_JSON=$(printf '%s' "$ROLE_NAMES" | jq -R 'split(",")')
          FAILURES=()

          for ACCOUNT in "${ACC_ARR[@]}"; do
            for REGION in "${REG_ARR[@]}"; do
              echo "===================================="
              echo "Precheck: Account=$ACCOUNT Region=$REGION"
              echo "===================================="

              CREDS_JSON=$(aws sts assume-role \
                --role-arn "arn:aws:iam::851321632855:role/githubaction-aws-connectivity-role" \
                --role-session-name "gh-actions-precheck" \
                --output json) || {
                echo "❌ Failed to assume role arn:aws:iam::851321632855:role/githubaction-aws-connectivity-role"
                FAILURES+=("${ACCOUNT}:${REGION}:assume-role")
                continue
              }

              export AWS_ACCESS_KEY_ID=$(echo "$CREDS_JSON" | jq -r '.Credentials.AccessKeyId')
              export AWS_SECRET_ACCESS_KEY=$(echo "$CREDS_JSON" | jq -r '.Credentials.SecretAccessKey')
              export AWS_SESSION_TOKEN=$(echo "$CREDS_JSON" | jq -r '.Credentials.SessionToken')
              export AWS_REGION="$REGION"

              pushd terraform/precheck >/dev/null

              export TF_VAR_role_names="$ROLE_NAMES_JSON"
              export TF_VAR_region="$REGION"

              echo "Running: terraform init"
              terraform init -input=false -no-color

              echo "Running: terraform validate"
              if ! terraform validate -no-color; then
                echo "❌ terraform validate failed for ${ACCOUNT}/${REGION}"
                FAILURES+=("${ACCOUNT}:${REGION}:validate")
                popd >/dev/null
                continue
              fi

              echo "Running: terraform plan (precheck)"
              if ! terraform plan -input=false -no-color -out=precheck.plan; then
                echo "❌ terraform plan failed for ${ACCOUNT}/${REGION}"
                FAILURES+=("${ACCOUNT}:${REGION}:plan")
                popd >/dev/null
                continue
              fi

              echo "✅ Precheck passed for ${ACCOUNT}/${REGION}"
              popd >/dev/null
            done
          done

          if [ ${#FAILURES[@]} -ne 0 ]; then
            echo "❌ Some prechecks failed:"
            printf '%s\n' "${FAILURES[@]}"
            exit 1
          else
            echo "✅ All Terraform prechecks passed!"
          fi
